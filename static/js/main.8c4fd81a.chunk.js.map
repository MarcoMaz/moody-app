{"version":3,"sources":["views/Intro.js","views/Question1.js","views/Elaborating.js","dormono.mp3","views/fakeData.js","views/Results.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Intro","to","Question1","Elaborating","useState","visible","setVisible","useEffect","setTimeout","fakeData","Results","activeAlbum","setActiveAlbum","visibleAlbum","setVisibleAlbum","newAudio","Audio","audio","rosi","map","music","index","onClick","album","handleClick","play","pause","App","className","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8c4fd81a.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\n\nconst Intro = () => {\n\treturn(\n\t\t<div>\n\t\t\tIntro\n\t\t\t<Link to=\"/question1\">\n\t\t\t\t<button>Go!</button>\n\t\t\t</Link>\n\t\t</div>\n\t)\n}\n\nexport default Intro","import { Link } from 'react-router-dom'\n\nconst Question1 = () => {\n\treturn(\n\t\t<div>\n\t\t\tThis is the first question\n\t\t\t<Link to=\"/elaborating\">\n\t\t\t\t<button>Go!</button>\n\t\t\t</Link>\t\t\n\t\t</div>\n\t)\n}\n\nexport default Question1","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Elaborating = () => {\n\tconst [ visible, setVisible ] = useState(false);\n\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n      setVisible(true);\n    }, 3000);\n\n\t}, [])\n\n\treturn(\n\t\t<div>\n\t\t\tSto elaborando i risultati\n\t\t\t<Link to=\"/results\">\n\t\t\t\t{\n\t\t\t\t\tvisible && <button>Go!</button>\n\t\t\t\t}\n\t\t\t</Link>\t\n\t\t</div>\n\t)\n}\n\nexport default Elaborating","export default __webpack_public_path__ + \"static/media/dormono.138fd424.mp3\";","const fakeData = {\n\t\"rosi\": [\n\t\t{\n\t\t\t\"album\": \"Plini\"\n\t\t},\n\t\t{\n\t\t\t\"album\": \"Dream Theater\"\n\t\t},\n\t\t{\n\t\t\t\"album\": \"The dark side of the moon\"\n\t\t},\n\t\t{\n\t\t\t\"album\": \"Michael Buble\"\n\t\t},\n\t\t{\n\t\t\t\"album\": \"The clash\"\n\t\t}\n\t]\n}\n\nexport default fakeData","import { useState } from 'react';\nimport { Link } from 'react-router-dom'\n\nimport audio from '../dormono.mp3';\n\nimport fakeData from './fakeData'\n\nconst Results = () => {\n\tconst [ activeAlbum, setActiveAlbum ] = useState('')\n\tconst [ visibleAlbum, setVisibleAlbum ] = useState(false)\n\n\tlet newAudio = new Audio(audio)\n\n\tconst start = () => {\n    newAudio.play();\n  }\n\n\tconst stop = () => {\n\t\tnewAudio.pause()\n\t}\n\n\tconst handleClick = (music) => {\n\t\tsetActiveAlbum(music.album)\n\t\tsetVisibleAlbum(true)\n\t}\n\n\treturn(\n\t\t<div>\n\t\t\t<p>questi sono i risultati</p>\n\t\t\t<ul>\n\t\t\t\t{\n\t\t\t\t\tfakeData.rosi.map((music, index) => (\n\t\t\t\t\t\t<li onClick={() => handleClick(music)} key={index}>{music.album}</li>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ul>\n\t\t\t{\n\t\t\t\tvisibleAlbum && \n\t\t\t\t<div>\n\t\t\t\t\t<strong>Hai scelto { activeAlbum}</strong><br/>\n\t\t\t\t\t<button onClick={start}>Play me!</button>\n\t\t\t\t\t<button onClick={stop}>Stop me!</button>\n\t\t\t\t\t<button onClick={() => setVisibleAlbum(false)}>Cambia canzone</button>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<Link to=\"/\">\n\t\t\t\t<button>Ritorna all'inizio</button>\n\t\t\t</Link>\n\t\t</div>\n\t)\n}\n\nexport default Results","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Intro from './views/Intro'\nimport Question1 from './views/Question1'\nimport Elaborating from './views/Elaborating'\nimport Results from './views/Results'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<Route exact path=\"/\" component={Intro}/>\n\t\t\t\t<Route path=\"/question1\" component={Question1}/>\n\t\t\t\t<Route path=\"/elaborating\" component={Elaborating} />\n\t\t\t\t<Route path=\"/results\" component={Results} />\n\t\t\t</Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}